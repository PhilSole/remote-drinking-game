/*
 * jQuery throttle / debounce - v1.1 - 3/7/2010
 * http://benalman.com/projects/jquery-throttle-debounce-plugin/
 * 
 * Copyright (c) 2010 "Cowboy" Ben Alman
 * Dual licensed under the MIT and GPL licenses.
 * http://benalman.com/about/license/
 */
(function(b,c){var $=b.jQuery||b.Cowboy||(b.Cowboy={}),a;$.throttle=a=function(e,f,j,i){var h,d=0;if(typeof f!=="boolean"){i=j;j=f;f=c}function g(){var o=this,m=+new Date()-d,n=arguments;function l(){d=+new Date();j.apply(o,n)}function k(){h=c}if(i&&!h){l()}h&&clearTimeout(h);if(i===c&&m>e){l()}else{if(f!==true){h=setTimeout(i?k:l,i===c?e-m:e)}}}if($.guid){g.guid=j.guid=j.guid||$.guid++}return g};$.debounce=function(d,e,f){return f===c?a(d,e,false):a(d,f,e!==false)}})(this);
// ==================================================================
//
//  This module names some global stuff then kicks off the app
//
// ==================================================================

// Global variable to namespace modules
let codrink19 = {};

// Global DOM variables
let $body;
let $viewHome, $viewWaiting, $viewGame, $viewLoading;

// Global layout vars
let windowHeight, windowWidth;

// Global objects
let socket;
let urlParams;
let playerData = {};
let roomData = {};


// Kickoff when the document is ready
$(document).ready(function() {
    // Save global DOM references
    setGlobalDOMVars();

    // window width and height for layout with JS
    setGlobalLayoutVars();

    // Check for existing game data in URL or localStorage
    getExistingGameData();

    // Initialise socket.io-client
    socket = io();

    // Only direct when the socket connects
    socket.on('connect', (e) => {
        directVisitor();
    });

    // Initialise the home module
    codrink19.home.init();

    // Set global event listeners
    $(window).on('resize', $.debounce( 50, handleResize));
    
});

function setGlobalDOMVars() {
    $body = $('body');
    $viewHome = $body.find('.view.home');
    $viewWaiting = $body.find('.view.waiting-room');
    $viewGame = $body.find('.view.game');
    $viewLoading = $body.find('.view.loading');
}

function setGlobalLayoutVars() {
    windowHeight = window.innerHeight;
    windowWidth = window.innerWidth;
}

function getExistingGameData() {
    // Check if localStorage values
    playerData.id = localStorage.getItem('id');

    // Check query params for roomKey, if localStorage is expired this might be relevant
    urlParams = new URLSearchParams(window.location.search);
    playerData.roomKey = urlParams.get('r');
}

function directVisitor() {
    // Direct based on data presence
    if(playerData.id) {
        // codrink19.connection.reconnection();  

    } else if(playerData.roomKey) {
        // No local storage but roomKey in query params so new player but room may be started, finished, or waiting.
        // New player always has to go through the waiting room though so they can enter a nickname

        if(playerData.roomKey === 'gameover') {
            codrink19.home.gameNotFound();    
        } else {
            codrink19.home.allowJoinGame();   
        }
        
    } else {
        // No local storage or roomKey
        codrink19.home.allowNewGame();
    }
}

function handleResize() {
    setGlobalLayoutVars();
}
// ==================================================================
//
//  This module handles player disconnection and reconnection
//
// ==================================================================
codrink19.connection = function() {

    let reconnection = function() {

        socket.emit('request reconnection', playerData.id, function(gameExists, allPlayers, roomObject, minigames) {
            
            if(gameExists) {

            } else {
                console.log('it doesnt');
            }
        });      


    }

    return {
        reconnection: reconnection
    }
}();
// ==================================================================
//
//  This module handles the home/splash view
//
// ==================================================================
codrink19.home = function() {
    let $announcement, $connectMessage, $connectHeading; 
    let $buttonStart;

    let init = function() {
        // Set DOM references
        $announcement = $viewHome.find('.announcements');
        $connectMessage = $viewHome.find('.connecting-message');
        $connectHeading = $connectMessage.find('.heading');
        $ellipses = $connectMessage.find('.ellipses');
        $buttonStart = $viewHome.find('.button-start');
        $buttonJoin = $viewHome.find('.button-join');

        // Update the splash screen with custom content based on data in URL or localStorage
        updateSplash();
    }

    function updateSplash() {
        if(playerData.id) {
            $connectHeading.text('Reconnecting');
        } else if(playerData.roomKey) {
            roomData.creator = urlParams.get('n');
            if(roomData.creator) {
                $announcement.text(roomData.creator + ' invited you').addClass('show-block');
            } else {
                $announcement.text('Checking your invite').addClass('show-block');
            }
        }
    }

    // Show the new game button when client can connect
    let allowNewGame = function(showMessage) {
        if(!showMessage) {
            $connectMessage.addClass('hide-me');
        }
        
        $buttonStart.addClass('show-block');

        $buttonStart.on('click', function() {
            codrink19.waitingRoom.init();
        });        
    }

    // Show the new game button when client can connect
    let allowJoinGame = function() {
        $connectMessage.addClass('hide-me');
        $buttonJoin.addClass('show-block');

        $buttonJoin.on('click', function() {
            codrink19.waitingRoom.init(playerData.roomKey);
        });        
    }

    let gameNotFound = function() {
        $connectHeading.text('Game not found!');
        if(roomData.creator) {
            $announcement.text(roomData.creator + "'s game has finished");
        } else {
            $announcement.text("Whoops");  
        }
        $ellipses.addClass('hide-me');
        allowNewGame(true);
    }

    return {
        init: init,
        allowNewGame: allowNewGame,
        allowJoinGame: allowJoinGame,
        gameNotFound: gameNotFound
    } 
}();
// ==================================================================
//
//  This module handles the waiting room logic
//
// ==================================================================
codrink19.waitingRoom = function() {

    let $headerWrap, $main, $sub;
    let $formWrap, $form, $playerName;
    let $shareStartWrap, $shareLinkWrap, $shareLink, $btnBegin;
    let $waitingWrap, $waitingList, $roomCount;
    
    let init = function(roomKey) {
        // Set DOM references  
        
        $headerWrap = $viewWaiting.find('.header-wrap');
        $main = $headerWrap.find('.main');
        $sub = $headerWrap.find('.sub');

        $formWrap = $viewWaiting.find('.nickname-form-wrap');
        $form = $formWrap.find('.formPlayer');
        $feedback = $formWrap.find('.form-feedback');
        $playerName = $form.find('#playerName');

        $shareStartWrap = $viewWaiting.find('.share-start-wrap');
        $shareLinkWrap = $shareStartWrap.find('.share-link-wrap');
        $shareLink = $shareStartWrap.find('#shareLink');
        $btnCopy = $shareStartWrap.find('.link-copy');
        $btnBegin = $shareStartWrap.find('.begin');

        $waitingWrap = $viewWaiting.find('.waiting-list-wrap');
        $waitingList = $waitingWrap.find('#waitingList');
        $roomCount = $waitingWrap.find('.room-count');
        

        // Either joining an existing room or creating a new one
        if(roomKey) {
            socket.emit('see waiting room', roomKey, function(otherplayers) {
                otherplayers.forEach(player => {
                    $waitingList.append('<li>' + player.nickname + '</li>');    
                });
                
                $waitingWrap.addClass('show-block');
            });

            $main.text("You're connected");
            $sub.text('Enter a nickname to join the player list.');

        } else {
            console.log('no room ID to join');
        }

        $form.on('submit', function(e) {
            e.preventDefault();

            // Get the 'name' value from the form and validate it
            let nickname = $playerName.val();
            if(nickname) {
                if(!roomKey) {

                    // New game so give it an ID
                    let lock = Math.random().toString(36).slice(-6);

                    // Emit a socket event with new player name and room
                    socket.emit('new game request', nickname, lock, function() {
                        // Set in-memory and local storage values for player ID and name
                        setPlayerData(socket.id, nickname, lock);
                    });

                    // Construct the game share link
                    let gameURL = location.protocol + '//' + location.host + '/join?r=' + lock + '&n=' + nickname;

                    // Update the view
                    $formWrap.addClass('hide-me');
                    $waitingList.append('<li>' + nickname + '</li>');
                    $shareLink.val(gameURL);
                    $shareLinkWrap.addClass('show-block');
                    $waitingWrap.addClass('show-block');
                    $main.text("You're set, " + nickname);
                    $sub.text('Share this link with your friends so they can join the game.');
                } else {                        

                    // Emit a socket event with new player name and the room to join
                    socket.emit('join room', nickname, roomKey, function(allPlayers) {
                        // Set local storage values for player ID and name Existing game so room given
                        setPlayerData(socket.id, nickname, roomKey);
                        updateWaitingList(allPlayers);
                        $main.text("You're in, " + nickname);
                        $sub.text('You can wait for more players or start the game.');
                    });

                    // Update the view
                    $formWrap.addClass('hide-me');
                }
            } else {
                $feedback.html('But what will we call you?');
                $playerName.one('input', function() {
                    $feedback.html('');
                });
            }
        });

        $btnCopy.on('click', function() {
            var copyText = document.getElementById("shareLink");
            copyText.select();
            copyText.setSelectionRange(0, 99999);
            document.execCommand("copy");
        });
        
        socket.on('new member', function(allPlayers) {
            let newPlayer = allPlayers[allPlayers.length - 1].nickname;
            updateWaitingList(allPlayers);
            $main.text(newPlayer + " joined!");
            if(allPlayers.length === 2) {
                $sub.text('You can wait for more players or start the game.');
            }
        });

        $btnBegin.on('click', function() {
            socket.emit('start game request', playerData.roomKey);
        });
        
        socket.on('game start', function(allPlayers, roomobject, minigames) {
            codrink19.game.init(allPlayers, roomobject, minigames);
        });

        $playerName.focus();

        // Waiting room is ready so transition views
        $viewHome.removeClass('active');
        $viewWaiting.addClass('active');


        function setPlayerData(id, nickname, roomKey) {
            playerData.id = id;
            playerData.nickname = nickname;
            playerData.roomKey = roomKey;

            // localStorage.setItem('id', id);
            // localStorage.setItem('nickname', nickname);
            // localStorage.setItem('roomKey', roomKey);
        }

        function updateWaitingList(allPlayers) {
            $waitingList.html('');
            
            allPlayers.forEach(player => {
                $waitingList.append('<li>' + player.nickname + '</li>');    
            });

            $roomCount.html(allPlayers.length + ' players');

            if(allPlayers.length > 1) {
                $btnBegin.addClass('show-block');
            }
        }
    }

    return {
        init: init
    } 
}();


// ==================================================================
// 
//  This module handles the game
// 
// ==================================================================

codrink19.game = function() {
    // DOM references
    let $mainMessageWrap, $main, $sub;
    let $minigameWrap, $minigameTitle, $minigameDescription;
    let $infoButtonWrap, $info, $btnRestart;
    let $playerList;

    // Logic variables
    let allPlayers, roomObject, minigames;
    let currentPlayer;
    let newMinigame;

    let init = function(thePlayers, theRoom, theMinigames) {
        // Set the module scoped variables
        allPlayers = thePlayers;
        roomObject = theRoom;
        minigames = theMinigames;

        // Link the DOM elements to vars
        setDOMVars();

        // Loop through the players data from the server and find the current player
        setPlayers();

        // Check if this client is the current player and carry out the appropriate turn function
        runTheTurn();

        // Set the socket listeners for game events
        setSocketListeners();

        // Slide in the game screen
        showViewGame();
    }

    function setDOMVars() {

        // The main messages at the top middle
        $mainMessageWrap = $viewGame.find('.main-message-wrap');
        $main = $mainMessageWrap.find('.main');
        $sub = $mainMessageWrap.find('.sub');

        // The minigame itself
        $minigameWrap = $viewGame.find('.minigame-wrap');
        $minigameTitle = $minigameWrap.find('.title');
        $minigameDescription = $minigameWrap.find('.description');

        // The extra info and restart button
        $infoButtonWrap = $viewGame.find('.info-button-wrap');
        $info = $infoButtonWrap.find('.info');
        $btnPassTurn = $infoButtonWrap.find('.btn-pass-turn');
        $btnRestart = $infoButtonWrap.find('.btn-restart');

        // The player list
        $playerListWrap = $viewGame.find('.player-list-wrap');
        $playerList = $playerListWrap.find('.player-list');
    }

    function setPlayers() {
        // Empty the player list
        $playerList.html('');

        allPlayers.forEach((player, index) => {
            // Find who's turn it is
            if(player.id == roomObject.turn) {
                // Set the local current player var
                currentPlayer = player;
                setNextPlayer(index);

                $playerList.append('<li class="active">' + player.nickname + '</li>');
            } else {
                $playerList.append('<li>' + player.nickname + '</li>');    
            }
        });
    }

    function setNextPlayer(currentindex) {
        let nextIndex;

        if(currentindex == allPlayers.length - 1) {
            nextIndex = 0;
        } else {
            nextIndex = currentindex + 1;
        }
    }

    function runTheTurn() {
        // Use the roomObject param's history to set the available minigames and historical minigames
        setMinigames();

        // Start the ticker loop that repeatedly updates the minigame title
        tickerGoing = true;
        runTicker();

        // Decide this client's role in the turn
        if(currentPlayer.id == playerData.id) {
            thisPlayersTurn();
        } else {
            anotherPlayersTurn();
        }
    }

    function thisPlayersTurn() {
        // Update the main text for the current player
        $main.text('Your turn, ' + playerData.nickname);
        $sub.text('Tap anywhere to pick your mini-game').removeClass('hide-me');;

        // Add a class to the view making it interactive for the current player
        $viewGame.addClass('current-player');

        // Add a listener to the screen for this player's click to pick a minigame
        $viewGame.one('click', () => {
            tickerGoing = false;
            $minigameDescription.text(newMinigame.details.description).addClass('show-block');
            $main.text('You picked:');
            $sub.addClass('hide-me');

            socket.emit('player pick', newMinigame.key, playerData.roomKey);

            setTimeout(() => {
                $btnPassTurn.addClass('show-inline-block');

                $btnPassTurn.one('click', () => {
                    console.log('clicked to pass turn');
                    socket.emit('pass turn', playerData.roomKey);    
                });
            }, 4000);
        });
    }

    function anotherPlayersTurn() {
        // Update the main text as a spectating player
        $main.text(currentPlayer.nickname + "'s turn");
        $sub.text('Waiting for ' + currentPlayer.nickname + ' to pick a mini-game.');

        $viewGame.removeClass('current-player');
    } 


    // =========================================================
    // Run the turn
    // =========================================================    
    let minigamesAvailable = [];
    let minigamesHistory = [];

    function setMinigames() {
        if(roomObject.history) {
            minigamesAvailable = minigames.filter(minigame => roomObject.history.indexOf(minigame.key) === -1);
            minigamesHistory = minigames.filter(minigame => roomObject.history.indexOf(minigame.key) >= 0);
        } else {
            minigamesAvailable = minigames;
        }
    }

    let tickerGoing;
    function runTicker() {
        if(tickerGoing) {
            // Pick a random minigame
            let newIndex = getRandomInt(0, minigamesAvailable.length - 1);
            newMinigame = minigamesAvailable[newIndex];

            // Update the minigame title
            $minigameTitle.text(newMinigame.name);

            // Repeat very fast
            setTimeout(() => {
                runTicker();
            }, 300);
        }
    }

    function setSocketListeners() {
        // when another player makes a pick
        socket.on('player pick', function(minigameKey) {

            tickerGoing = false;
            newMinigame = minigames.find(minigame => minigame.key === minigameKey);


            $minigameTitle.text(newMinigame.name);
            $minigameDescription.text(newMinigame.details.description).addClass('show-block');

            $main.text(currentPlayer.nickname + ' picked:');
            $sub.addClass('hide-me');

        });

        // when another player makes a pick
        socket.on('turn passed', function(thePlayers, theRoom) {
            allPlayers = thePlayers;
            roomObject = theRoom;

            console.log(roomObject);

            setPlayers();
            runTheTurn();

            $btnPassTurn.removeClass('show-inline-block');
            $minigameDescription.removeClass('show-block');
            $mainMessageWrap.removeClass('hide-me');
        });
    }


    // =========================================================
    // Helper functions
    // =========================================================
    function getRandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    function showViewGame() {
        $viewWaiting.removeClass('active');
        $viewGame.addClass('active');
    }

    return {
        init: init,
        setMinigames: setMinigames
    } 
}();