/*!
 * clipboard.js v2.0.6
 * https://clipboardjs.com/
 * 
 * Licensed MIT Â© Zeno Rocha
 */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.ClipboardJS=e():t.ClipboardJS=e()}(this,function(){return o={},r.m=n=[function(t,e){t.exports=function(t){var e;if("SELECT"===t.nodeName)t.focus(),e=t.value;else if("INPUT"===t.nodeName||"TEXTAREA"===t.nodeName){var n=t.hasAttribute("readonly");n||t.setAttribute("readonly",""),t.select(),t.setSelectionRange(0,t.value.length),n||t.removeAttribute("readonly"),e=t.value}else{t.hasAttribute("contenteditable")&&t.focus();var o=window.getSelection(),r=document.createRange();r.selectNodeContents(t),o.removeAllRanges(),o.addRange(r),e=o.toString()}return e}},function(t,e){function n(){}n.prototype={on:function(t,e,n){var o=this.e||(this.e={});return(o[t]||(o[t]=[])).push({fn:e,ctx:n}),this},once:function(t,e,n){var o=this;function r(){o.off(t,r),e.apply(n,arguments)}return r._=e,this.on(t,r,n)},emit:function(t){for(var e=[].slice.call(arguments,1),n=((this.e||(this.e={}))[t]||[]).slice(),o=0,r=n.length;o<r;o++)n[o].fn.apply(n[o].ctx,e);return this},off:function(t,e){var n=this.e||(this.e={}),o=n[t],r=[];if(o&&e)for(var i=0,a=o.length;i<a;i++)o[i].fn!==e&&o[i].fn._!==e&&r.push(o[i]);return r.length?n[t]=r:delete n[t],this}},t.exports=n,t.exports.TinyEmitter=n},function(t,e,n){var d=n(3),h=n(4);t.exports=function(t,e,n){if(!t&&!e&&!n)throw new Error("Missing required arguments");if(!d.string(e))throw new TypeError("Second argument must be a String");if(!d.fn(n))throw new TypeError("Third argument must be a Function");if(d.node(t))return s=e,f=n,(u=t).addEventListener(s,f),{destroy:function(){u.removeEventListener(s,f)}};if(d.nodeList(t))return a=t,c=e,l=n,Array.prototype.forEach.call(a,function(t){t.addEventListener(c,l)}),{destroy:function(){Array.prototype.forEach.call(a,function(t){t.removeEventListener(c,l)})}};if(d.string(t))return o=t,r=e,i=n,h(document.body,o,r,i);throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList");var o,r,i,a,c,l,u,s,f}},function(t,n){n.node=function(t){return void 0!==t&&t instanceof HTMLElement&&1===t.nodeType},n.nodeList=function(t){var e=Object.prototype.toString.call(t);return void 0!==t&&("[object NodeList]"===e||"[object HTMLCollection]"===e)&&"length"in t&&(0===t.length||n.node(t[0]))},n.string=function(t){return"string"==typeof t||t instanceof String},n.fn=function(t){return"[object Function]"===Object.prototype.toString.call(t)}},function(t,e,n){var a=n(5);function i(t,e,n,o,r){var i=function(e,n,t,o){return function(t){t.delegateTarget=a(t.target,n),t.delegateTarget&&o.call(e,t)}}.apply(this,arguments);return t.addEventListener(n,i,r),{destroy:function(){t.removeEventListener(n,i,r)}}}t.exports=function(t,e,n,o,r){return"function"==typeof t.addEventListener?i.apply(null,arguments):"function"==typeof n?i.bind(null,document).apply(null,arguments):("string"==typeof t&&(t=document.querySelectorAll(t)),Array.prototype.map.call(t,function(t){return i(t,e,n,o,r)}))}},function(t,e){if("undefined"!=typeof Element&&!Element.prototype.matches){var n=Element.prototype;n.matches=n.matchesSelector||n.mozMatchesSelector||n.msMatchesSelector||n.oMatchesSelector||n.webkitMatchesSelector}t.exports=function(t,e){for(;t&&9!==t.nodeType;){if("function"==typeof t.matches&&t.matches(e))return t;t=t.parentNode}}},function(t,e,n){"use strict";n.r(e);var o=n(0),r=n.n(o),i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};function a(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function c(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,c),this.resolveOptions(t),this.initSelection()}var l=(function(t,e,n){return e&&a(t.prototype,e),n&&a(t,n),t}(c,[{key:"resolveOptions",value:function(t){var e=0<arguments.length&&void 0!==t?t:{};this.action=e.action,this.container=e.container,this.emitter=e.emitter,this.target=e.target,this.text=e.text,this.trigger=e.trigger,this.selectedText=""}},{key:"initSelection",value:function(){this.text?this.selectFake():this.target&&this.selectTarget()}},{key:"selectFake",value:function(){var t=this,e="rtl"==document.documentElement.getAttribute("dir");this.removeFake(),this.fakeHandlerCallback=function(){return t.removeFake()},this.fakeHandler=this.container.addEventListener("click",this.fakeHandlerCallback)||!0,this.fakeElem=document.createElement("textarea"),this.fakeElem.style.fontSize="12pt",this.fakeElem.style.border="0",this.fakeElem.style.padding="0",this.fakeElem.style.margin="0",this.fakeElem.style.position="absolute",this.fakeElem.style[e?"right":"left"]="-9999px";var n=window.pageYOffset||document.documentElement.scrollTop;this.fakeElem.style.top=n+"px",this.fakeElem.setAttribute("readonly",""),this.fakeElem.value=this.text,this.container.appendChild(this.fakeElem),this.selectedText=r()(this.fakeElem),this.copyText()}},{key:"removeFake",value:function(){this.fakeHandler&&(this.container.removeEventListener("click",this.fakeHandlerCallback),this.fakeHandler=null,this.fakeHandlerCallback=null),this.fakeElem&&(this.container.removeChild(this.fakeElem),this.fakeElem=null)}},{key:"selectTarget",value:function(){this.selectedText=r()(this.target),this.copyText()}},{key:"copyText",value:function(){var e=void 0;try{e=document.execCommand(this.action)}catch(t){e=!1}this.handleResult(e)}},{key:"handleResult",value:function(t){this.emitter.emit(t?"success":"error",{action:this.action,text:this.selectedText,trigger:this.trigger,clearSelection:this.clearSelection.bind(this)})}},{key:"clearSelection",value:function(){this.trigger&&this.trigger.focus(),document.activeElement.blur(),window.getSelection().removeAllRanges()}},{key:"destroy",value:function(){this.removeFake()}},{key:"action",set:function(t){var e=0<arguments.length&&void 0!==t?t:"copy";if(this._action=e,"copy"!==this._action&&"cut"!==this._action)throw new Error('Invalid "action" value, use either "copy" or "cut"')},get:function(){return this._action}},{key:"target",set:function(t){if(void 0!==t){if(!t||"object"!==(void 0===t?"undefined":i(t))||1!==t.nodeType)throw new Error('Invalid "target" value, use a valid Element');if("copy"===this.action&&t.hasAttribute("disabled"))throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');if("cut"===this.action&&(t.hasAttribute("readonly")||t.hasAttribute("disabled")))throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');this._target=t}},get:function(){return this._target}}]),c),u=n(1),s=n.n(u),f=n(2),d=n.n(f),h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},p=function(t,e,n){return e&&y(t.prototype,e),n&&y(t,n),t};function y(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}var m=(function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(v,s.a),p(v,[{key:"resolveOptions",value:function(t){var e=0<arguments.length&&void 0!==t?t:{};this.action="function"==typeof e.action?e.action:this.defaultAction,this.target="function"==typeof e.target?e.target:this.defaultTarget,this.text="function"==typeof e.text?e.text:this.defaultText,this.container="object"===h(e.container)?e.container:document.body}},{key:"listenClick",value:function(t){var e=this;this.listener=d()(t,"click",function(t){return e.onClick(t)})}},{key:"onClick",value:function(t){var e=t.delegateTarget||t.currentTarget;this.clipboardAction&&(this.clipboardAction=null),this.clipboardAction=new l({action:this.action(e),target:this.target(e),text:this.text(e),container:this.container,trigger:e,emitter:this})}},{key:"defaultAction",value:function(t){return b("action",t)}},{key:"defaultTarget",value:function(t){var e=b("target",t);if(e)return document.querySelector(e)}},{key:"defaultText",value:function(t){return b("text",t)}},{key:"destroy",value:function(){this.listener.destroy(),this.clipboardAction&&(this.clipboardAction.destroy(),this.clipboardAction=null)}}],[{key:"isSupported",value:function(t){var e=0<arguments.length&&void 0!==t?t:["copy","cut"],n="string"==typeof e?[e]:e,o=!!document.queryCommandSupported;return n.forEach(function(t){o=o&&!!document.queryCommandSupported(t)}),o}}]),v);function v(t,e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,v);var n=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(v.__proto__||Object.getPrototypeOf(v)).call(this));return n.resolveOptions(e),n.listenClick(t),n}function b(t,e){var n="data-clipboard-"+t;if(e.hasAttribute(n))return e.getAttribute(n)}e.default=m}],r.c=o,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=6).default;function r(t){if(o[t])return o[t].exports;var e=o[t]={i:t,l:!1,exports:{}};return n[t].call(e.exports,e,e.exports,r),e.l=!0,e.exports}var n,o});
/*
 * jQuery throttle / debounce - v1.1 - 3/7/2010
 * http://benalman.com/projects/jquery-throttle-debounce-plugin/
 * 
 * Copyright (c) 2010 "Cowboy" Ben Alman
 * Dual licensed under the MIT and GPL licenses.
 * http://benalman.com/about/license/
 */
(function(b,c){var $=b.jQuery||b.Cowboy||(b.Cowboy={}),a;$.throttle=a=function(e,f,j,i){var h,d=0;if(typeof f!=="boolean"){i=j;j=f;f=c}function g(){var o=this,m=+new Date()-d,n=arguments;function l(){d=+new Date();j.apply(o,n)}function k(){h=c}if(i&&!h){l()}h&&clearTimeout(h);if(i===c&&m>e){l()}else{if(f!==true){h=setTimeout(i?k:l,i===c?e-m:e)}}}if($.guid){g.guid=j.guid=j.guid||$.guid++}return g};$.debounce=function(d,e,f){return f===c?a(d,e,false):a(d,f,e!==false)}})(this);
// ==================================================================
//
//  This module names some global stuff then kicks off the app
//
// ==================================================================

// Global variable to namespace modules
let codrink19 = {};

// Global DOM variables
let $body;
let $viewHome, $viewWaiting, $viewGame, $viewLoading;

// Global layout vars
let windowHeight, windowWidth;

// Global objects
let socket;
let urlParams;
let playerData = {};
let roomData = {};


// Kickoff when the document is ready
$(document).ready(function() {
    // Save global DOM references
    setGlobalDOMVars();

    // window width and height for layout with JS
    setGlobalLayoutVars();

    // Check for existing game data in URL or localStorage
    getExistingGameData();

    // Initialise socket.io-client
    socket = io();

    // Only direct when the socket connects
    socket.on('connect', (e) => {
        directVisitor();
    });

    // Initialise the home module
    codrink19.home.init();

    // Set global event listeners
    $(window).on('resize', $.debounce( 50, handleResize));
    
});

function setGlobalDOMVars() {
    $body = $('body');
    $viewHome = $body.find('.view.home');
    $viewWaiting = $body.find('.view.waiting-room');
    $viewGame = $body.find('.view.game');
    $viewLoading = $body.find('.view.loading');
}

function setGlobalLayoutVars() {
    windowHeight = window.innerHeight;
    windowWidth = window.innerWidth;
}

function getExistingGameData() {
    // Check if localStorage values
    playerData.id = localStorage.getItem('id');

    // Check query params for roomKey, if localStorage is expired this might be relevant
    urlParams = new URLSearchParams(window.location.search);
    playerData.roomKey = urlParams.get('r');
}

function directVisitor() {
    // Direct based on data presence
    if(playerData.id) {
        // codrink19.connection.reconnection();  

    } else if(playerData.roomKey) {
        // No local storage but roomKey in query params so new player but room may be started, finished, or waiting.
        // New player always has to go through the waiting room though so they can enter a nickname

        if(playerData.roomKey === 'gameover') {
            codrink19.home.gameNotFound();    
        } else {
            codrink19.home.allowJoinGame();   
        }
        
    } else {
        // No local storage or roomKey
        codrink19.home.allowNewGame();
    }
}

function handleResize() {
    setGlobalLayoutVars();
}
// ==================================================================
//
//  This module handles player disconnection and reconnection
//
// ==================================================================
codrink19.connection = function() {

    let reconnection = function() {

        socket.emit('request reconnection', playerData.id, function(gameExists, allPlayers, roomObject, minigames) {
            
            if(gameExists) {

            } else {
                console.log('it doesnt');
            }
        });      


    }

    return {
        reconnection: reconnection
    }
}();
// ==================================================================
//
//  This module handles the home/splash view
//
// ==================================================================
codrink19.home = function() {
    let $announcement, $connectMessage, $connectHeading; 
    let $buttonStart;

    let init = function() {
        // Set DOM references
        $announcement = $viewHome.find('.announcements');
        $connectMessage = $viewHome.find('.connecting-message');
        $connectHeading = $connectMessage.find('.heading');
        $ellipses = $connectMessage.find('.ellipses');
        $buttonStart = $viewHome.find('.button-start');
        $buttonJoin = $viewHome.find('.button-join');

        // Update the splash screen with custom content based on data in URL or localStorage
        updateSplash();
    }

    function updateSplash() {
        if(playerData.id) {
            $connectHeading.text('Reconnecting');
        } else if(playerData.roomKey) {
            roomData.creator = urlParams.get('n');
            if(roomData.creator) {
                $announcement.text(roomData.creator + ' invited you').addClass('show-block');
            } else {
                $announcement.text('Checking your invite').addClass('show-block');
            }
        }
    }

    // Show the new game button when client can connect
    let allowNewGame = function(showMessage) {
        if(!showMessage) {
            $connectMessage.addClass('hide-me');
        }
        
        $buttonStart.addClass('show-block');

        $buttonStart.on('click', function() {
            codrink19.waitingRoom.init();
        });        
    }

    // Show the new game button when client can connect
    let allowJoinGame = function() {
        $connectMessage.addClass('hide-me');
        $buttonJoin.addClass('show-block');

        $buttonJoin.on('click', function() {
            codrink19.waitingRoom.init(playerData.roomKey);
        });        
    }

    let gameNotFound = function() {
        $connectHeading.text('Game not found!');
        if(roomData.creator) {
            $announcement.text(roomData.creator + "'s game has finished");
        } else {
            $announcement.text("Whoops");  
        }
        $ellipses.addClass('hide-me');
        allowNewGame(true);
    }

    return {
        init: init,
        allowNewGame: allowNewGame,
        allowJoinGame: allowJoinGame,
        gameNotFound: gameNotFound
    } 
}();
// ==================================================================
//
//  This module handles the waiting room logic
//
// ==================================================================
codrink19.waitingRoom = function() {

    let $headerWrap, $main, $sub;
    let $formWrap, $form, $playerName;
    let $shareStartWrap, $shareLinkWrap, $shareLink, $btnBegin;
    let $waitingWrap, $waitingList, $roomCount;

    let roomKey;
    
    let init = function(theRoomKey) {
        roomKey = theRoomKey;

        // Set DOM references
        setWaitingDOMvars();

        // Either joining an existing room or creating a new one
        checkForRoomKey();
        
        // set UI interaction listeners
        setUIEventListeners();

        // listen for socket events
        setSocketListeners();

        // show the waiting room view
        showWaitingRoom();   

        $playerName.focus();
    }

    function setWaitingDOMvars() {
        $headerWrap = $viewWaiting.find('.header-wrap');
        $main = $headerWrap.find('.main');
        $sub = $headerWrap.find('.sub');

        $formWrap = $viewWaiting.find('.nickname-form-wrap');
        $form = $formWrap.find('.formPlayer');
        $feedback = $formWrap.find('.form-feedback');
        $playerName = $form.find('#playerName');

        $shareStartWrap = $viewWaiting.find('.share-start-wrap');
        $shareLinkWrap = $shareStartWrap.find('.share-link-wrap');
        $shareLink = $shareStartWrap.find('#shareLink');
        $btnCopy = $shareStartWrap.find('.link-copy');
        $btnBegin = $shareStartWrap.find('.begin');

        $waitingWrap = $viewWaiting.find('.waiting-list-wrap');
        $waitingList = $waitingWrap.find('#waitingList');
        $roomCount = $waitingWrap.find('.room-count');        
    }

    function checkForRoomKey() {
        if(roomKey) {
            socket.emit('see waiting room', roomKey, function(otherplayers) {
                otherplayers.forEach(player => {
                    $waitingList.append('<li>' + player.nickname + '</li>');    
                });
                
                $waitingWrap.addClass('show-block');
            });

            $main.text("You're connected");
            $sub.text('Enter a nickname to join the player list.').addClass('show-block');
        }
    }

    function setUIEventListeners() {
        // Listen for successful nickname submission and call to create new game
        $form.on('submit', function(e) {
            e.preventDefault();

            createNewGame(validateNickname());
        });

        // Set up copy button with clipboard.js library
        let clipboard = new ClipboardJS('.link-copy');
        
        // Listen for start button click
        $btnBegin.on('click', function() {
            socket.emit('start game request', playerData.roomKey);
        });
    }

    function validateNickname() {
        let nickname = $playerName.val();
        let regexp = /^[a-z 0-9]+$/gmi;

        if(!regexp.test(nickname)) {
            if(nickname.length === 0) {
                $feedback.html('But what will I call you?');   
            } else {
                $feedback.html('Maximum 20 letters (Latin), numbers, and spaces sorry.');
            }
            
            $playerName.one('input', function() {
                $feedback.html('');
            });
        } else {
            return nickname;
        }        
    }

    function createNewGame(nickname) {
        if(!nickname) return;

        if(!roomKey) {
            // New game so give it an ID
            let lock = Math.random().toString(36).slice(-6);

            // Emit a socket event with new player name and room
            socket.emit('new game request', nickname, lock, function() {
                // Set in-memory and local storage values for player ID and name
                setPlayerData(socket.id, nickname, lock);
            });

            // Construct the game share link
            let gameURL = location.host + '/join?r=' + lock + '&n=' + encodeURI(nickname);

            // Update the view
            $formWrap.addClass('hide-me');
            $waitingList.append('<li>' + nickname + '</li>');
            $shareLink.text(gameURL);
            $shareLinkWrap.addClass('show-flex');
            $waitingWrap.addClass('show-block');
            $main.text("All set, " + nickname);
            $sub.text('Share this link with your friends so they can join the game.').addClass('show-block');
        } else {                        

            // Emit a socket event with new player name and the room to join
            socket.emit('join room', nickname, roomKey, function(allPlayers) {
                // Set local storage values for player ID and name Existing game so room given
                setPlayerData(socket.id, nickname, roomKey);
                updateWaitingList(allPlayers);
                $main.text("You're in, " + nickname);
                $sub.text('You can wait for more players or start the game.');
            });

            // Update the view
            $formWrap.addClass('hide-me');
        }
    }    

    function setSocketListeners() {
        // A new member has joined the room so update the view
        socket.on('new member', function(allPlayers) {
            let newPlayer = allPlayers[allPlayers.length - 1].nickname;
            updateWaitingList(allPlayers);
            $main.text(newPlayer + " joined!");
            if(allPlayers.length === 2) {
                $sub.text('You can wait for more players or start the game.');
            }
        });
        
        // The game is being started so init the game
        socket.on('game start', function(allPlayers, roomobject, minigames) {
            codrink19.game.init(allPlayers, roomobject, minigames);
        });
    }

    function setPlayerData(id, nickname, roomKey) {
        playerData.id = id;
        playerData.nickname = nickname;
        playerData.roomKey = roomKey;

        // localStorage.setItem('id', id);
        // localStorage.setItem('nickname', nickname);
        // localStorage.setItem('roomKey', roomKey);
    }

    function updateWaitingList(allPlayers) {
        $waitingList.html('');
        
        allPlayers.forEach(player => {
            $waitingList.append('<li>' + player.nickname + '</li>');    
        });

        $roomCount.html(allPlayers.length + ' players');

        if(allPlayers.length > 1) {
            $btnBegin.addClass('show-block');
        }
    }

    function showWaitingRoom() {
        // Waiting room is ready so transition views
        $viewHome.removeClass('active');
        $viewWaiting.addClass('active');
    }

    return {
        init: init
    } 
}();


// ==================================================================
// 
//  This module handles the game
// 
// ==================================================================

codrink19.game = function() {
    // DOM references
    let $mainMessageWrap, $main, $sub;
    let $minigameWrap, $minigameTitle, $minigameDescription;
    let $infoButtonWrap, $info, $btnRestart;
    let $playerList;

    // Logic variables
    let allPlayers, roomObject, minigames;
    let currentPlayer;
    let newMinigame;

    let init = function(thePlayers, theRoom, theMinigames) {
        // Set the module scoped variables
        allPlayers = thePlayers;
        roomObject = theRoom;
        minigames = theMinigames;

        // Link the DOM elements to vars
        setDOMVars();

        // Loop through the players data from the server and find the current player
        setPlayers();

        // Check if this client is the current player and carry out the appropriate turn function
        runTheTurn();

        // Set the socket listeners for game events
        setSocketListeners();

        // Slide in the game screen
        showViewGame();
    }

    function setDOMVars() {

        // The main messages at the top middle
        $mainMessageWrap = $viewGame.find('.main-message-wrap');
        $main = $mainMessageWrap.find('.main');
        $sub = $mainMessageWrap.find('.sub');

        // The minigame itself
        $minigameWrap = $viewGame.find('.minigame-wrap');
        $minigameTitle = $minigameWrap.find('.title');
        $minigameDescription = $minigameWrap.find('.description');

        // The extra info and restart button
        $infoButtonWrap = $viewGame.find('.info-button-wrap');
        $info = $infoButtonWrap.find('.info');
        $btnPassTurn = $infoButtonWrap.find('.btn-pass-turn');
        $btnRestart = $infoButtonWrap.find('.btn-restart');

        // The player list
        $playerListWrap = $viewGame.find('.player-list-wrap');
        $playerList = $playerListWrap.find('.player-list');
    }

    function setPlayers() {
        // Empty the player list
        $playerList.html('');

        allPlayers.forEach((player, index) => {
            // Find who's turn it is
            if(player.id == roomObject.turn) {
                // Set the local current player var
                currentPlayer = player;
                setNextPlayer(index);

                $playerList.append('<li class="active">' + player.nickname + '</li>');
            } else {
                $playerList.append('<li>' + player.nickname + '</li>');    
            }
        });

        // Position the player list so active is in the middle
        // setTimeout(positionPlayerList, 30);
    }

    function positionPlayerList() {
        let $activePlayer = $playerList.find('.active');
        let playerListOffset = $playerList.offset().left;
        let activeOffset = $activePlayer.offset().left;

        console.log(playerListOffset, activeOffset);

        if(activeOffset > windowWidth/2) {
            console.log('its past halfway');
            let activeWidth = $activePlayer.outerWidth();
            let amountToShift = activeOffset + playerListOffset + activeWidth/2 - windowWidth/2;
            console.log(activeWidth, amountToShift);
            $playerListWrap.animate({
                scrollLeft: amountToShift
            }, 500);
        } else {
            $playerListWrap.animate({
                scrollLeft: 0
            }, 500);            
        }
    }

    function setNextPlayer(currentindex) {
        let nextIndex;

        if(currentindex == allPlayers.length - 1) {
            nextIndex = 0;
        } else {
            nextIndex = currentindex + 1;
        }
    }

    function runTheTurn() {
        // Use the roomObject param's history to set the available minigames and historical minigames
        setMinigames();

        // Start the ticker loop that repeatedly updates the minigame title
        tickerGoing = true;
        runTicker();

        // Decide this client's role in the turn
        if(currentPlayer.id == playerData.id) {
            thisPlayersTurn();
        } else {
            anotherPlayersTurn();
        }
    }

    function thisPlayersTurn() {
        // Update the main text for the current player
        $main.text('Your turn, ' + playerData.nickname);
        $sub.text('Tap anywhere to pick your mini-game').removeClass('hide-me');;

        // Add a class to the view making it interactive for the current player
        $viewGame.addClass('current-player');

        // Add a listener to the screen for this player's click to pick a minigame
        $viewGame.one('click', () => {
            tickerGoing = false;
            $minigameDescription.text(newMinigame.details.description).addClass('show-block');
            $main.text('You picked:');
            $sub.addClass('hide-me');

            socket.emit('player pick', newMinigame.key, playerData.roomKey);

            setTimeout(() => {
                $btnPassTurn.addClass('show-inline-block');

                $btnPassTurn.one('click', () => {
                    console.log('clicked to pass turn');
                    socket.emit('pass turn', playerData.roomKey);    
                });
            }, 4000);
        });
    }

    function anotherPlayersTurn() {
        // Update the main text as a spectating player
        $main.text(currentPlayer.nickname + "'s turn");
        $sub.text('Waiting for ' + currentPlayer.nickname + ' to pick a mini-game.');

        $viewGame.removeClass('current-player');
    } 


    // =========================================================
    // Run the turn
    // =========================================================    
    let minigamesAvailable = [];
    let minigamesHistory = [];

    function setMinigames() {
        if(roomObject.history) {
            minigamesAvailable = minigames.filter(minigame => roomObject.history.indexOf(minigame.key) === -1);
            minigamesHistory = minigames.filter(minigame => roomObject.history.indexOf(minigame.key) >= 0);
        } else {
            minigamesAvailable = minigames;
        }
    }

    let tickerGoing;
    function runTicker() {
        if(tickerGoing) {
            // Pick a random minigame
            let newIndex = getRandomInt(0, minigamesAvailable.length - 1);
            newMinigame = minigamesAvailable[newIndex];

            // Update the minigame title
            $minigameTitle.text(newMinigame.name);

            // Repeat very fast
            setTimeout(() => {
                runTicker();
            }, 300);
        }
    }

    function setSocketListeners() {
        // when another player makes a pick
        socket.on('player pick', function(minigameKey) {

            tickerGoing = false;
            newMinigame = minigames.find(minigame => minigame.key === minigameKey);


            $minigameTitle.text(newMinigame.name);
            $minigameDescription.text(newMinigame.details.description).addClass('show-block');

            $main.text(currentPlayer.nickname + ' picked:');
            $sub.addClass('hide-me');

        });

        // when another player makes a pick
        socket.on('turn passed', function(thePlayers, theRoom) {
            allPlayers = thePlayers;
            roomObject = theRoom;

            console.log(roomObject);

            setPlayers();
            runTheTurn();

            $btnPassTurn.removeClass('show-inline-block');
            $minigameDescription.removeClass('show-block');
            $mainMessageWrap.removeClass('hide-me');
        });
    }


    // =========================================================
    // Helper functions
    // =========================================================
    function getRandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    function showViewGame() {
        $viewWaiting.removeClass('active');
        $viewGame.addClass('active');
    }

    return {
        init: init,
        setMinigames: setMinigames
    } 
}();