// ==================================================================
//
//  This module names some global stuff then kicks off the app
//
// ==================================================================

// Global variable to namespace modules
let codrink19 = {};

// Global DOM variables
let $body;
let $viewHome, $viewWaiting, $viewGame;

// Global objects
let socket;

let playerData = {};


// Kickoff when the document is ready
$(document).ready(function() {

    // Assign global DOM variables
    $body = $('body');
    $viewHome = $body.find('.view.home');
    $viewWaiting = $body.find('.view.waiting-room');
    $viewGame = $body.find('.view.game');

    // Check if new game or join game scenario
    let urlParams = new URLSearchParams(window.location.search);
    let roomID = urlParams.get('room');

    if(!roomID) {
        codrink19.welcome.init();    
    } else {
        codrink19.waitingRoom.init(roomID);

        $viewHome.removeClass('active');
        $viewWaiting.addClass('active');
    }    
});
// ==================================================================
//
//  This module handles new visitors who are not joining another game
//
// ==================================================================
codrink19.welcome = function() {
    let $buttonStart;

    let init = function() {

        $buttonStart = $body.find('.button-start');

        $buttonStart.on('click', function() {
            codrink19.waitingRoom.init();
        });
    }

    return {
        init: init
    } 
}();
// ==================================================================
//
//  This module handles the waiting room logic
//
// ==================================================================
codrink19.waitingRoom = function() {

    let $formWrap, $form, $playerName;
    let $waitingWrap, $waitingList, $shareWrap, $shareLink, $roomCount, $btnBegin;
    
    let init = function(roomID = false) {
        
        $formWrap = $body.find('.nickname-form-wrap');
        $form = $formWrap.find('.formPlayer');
        $playerName = $form.find('#playerName');
        $waitingWrap = $body.find('.waiting-list-wrap');
        $waitingList = $waitingWrap.find('#waitingList');
        $shareWrap = $waitingWrap.find('.share-wrap');
        $shareLink = $shareWrap.find('.share-link');
        $roomCount = $waitingWrap.find('.room-count');
        $btnBegin = $waitingWrap.find('.begin');

        // Initialise socket.io-client
        socket = io();

        // Wait for connection to ensure communication possible
        socket.on('connect', (e) => {
            console.log('client: connect');

            // Either joining an existing room or creating a new one
            if(roomID) {
                socket.emit('see waiting room', roomID, function(otherplayers) {
                    otherplayers.forEach(player => {
                        $waitingList.append('<li>' + player['name'] + '</li>');    
                    });
                    $waitingWrap.addClass('show');
                });

                $shareWrap.addClass('hide');
            } else {
                console.log('no room ID to join');
            }

            $form.on('submit', function(e) {
                e.preventDefault();
    
                // Get the 'name' value from the form and validate it
                let nickname = $playerName.val();
                if(nickname) {
                    if(!roomID) {
    
                        // New game so give it an ID
                        let newRoomID = Math.random().toString(36).slice(-6);

                        // Emit a socket event with new player name and room
                        socket.emit('new game request', {name: nickname, room: newRoomID}, function() {
                            // Set in-memory and local storage values for player ID and name
                            setPlayerData(socket.id, nickname, newRoomID);
                        });
    
                        // Construct the game share link
                        let gameURL = location.protocol + '//' + location.host + '/join?room=' + newRoomID;
    
                        // Update the view
                        $formWrap.addClass('hide');
                        $waitingList.append('<li>' + nickname + '</li>');
                        $shareLink.val(gameURL);
                        $waitingWrap.addClass('show');
                    } else {                        
    
                        // Emit a socket event with new player name and the room to join
                        socket.emit('join room', { name: nickname, room: roomID }, function(players) {
                            // Set local storage values for player ID and name Existing game so room given
                            setPlayerData(socket.id, nickname, roomID);
                            updateWaitingList(players);
                        });
    
                        // Update the view
                        $formWrap.addClass('hide');
                    }
    
    
                } else {
                    $form.find('.form-feedback').html('But what will we call you?');
                    $playerName.one('change', function() {
                        $form.find('.form-feedback').html('');
                    });
                }
            });
            
            socket.on('new member', function(players) {
                updateWaitingList(players);
            });
    
            $btnBegin.on('click', function() {
                socket.emit('start game request', playerData.room, function(allPlayers, roomobject, minigames) {
                    codrink19.game.init(allPlayers, roomobject, minigames);
                });
            });
            
            socket.on('game start', function(allPlayers, roomobject) {
                codrink19.game.init(allPlayers, roomobject);
            });

            $playerName.focus();

            // Waiting room is ready so transition views
            $viewHome.removeClass('active');
            $viewWaiting.addClass('active');
        });

        function setPlayerData(id, name, room) {
            playerData.id = id;
            playerData.name = name;
            playerData.room = room;

            localStorage.setItem('playerID', id);
            localStorage.setItem('playerName', name);
            localStorage.setItem('playerRoom', room);
        }

        function updateWaitingList(players) {
            $waitingList.html('');
            
            players.forEach(player => {
                $waitingList.append('<li>' + player['name'] + '</li>');    
            });

            $roomCount.html(players.length + ' players');

            if(players.length > 1) {
                $btnBegin.addClass('show');
            }
        }
    }

    return {
        init: init
    } 
}();


// ==================================================================
//
//  This module handles the game
//
// ==================================================================
codrink19.game = function() {
    let $currentPlayerName, $nextPlayerName, $yourTurnMessage, $waitingForMessage;

    let allPlayers, currentPlayer, nextPlayer;

    let subgames;

    let init = function(players, room, minigames) {
        console.log(players, room, minigames);

        $currentPlayerName = $viewGame.find('.current-player-name');
        $nextPlayerName = $viewGame.find('.next-player-name');
        $yourTurnMessage = $viewGame.find('.your-turn-message');
        $waitingForMessage = $viewGame.find('.waiting-for-message');

        allPlayers = players;
        subgames = minigames;

        // Loop through the players data from the server and set up the turn
        players.forEach((player, index) => {
            // Find who's turn it is
            if(player['id'] == room['turn']) {
                // Set the local current player var
                currentPlayer = player;
                setNextPlayer(index);
            }
        });

        if(currentPlayer.id == playerData.id) {
            thisPlayersTurn();
        } else {
            anotherPlayersTurn();
        }


        $viewWaiting.removeClass('active');
        $viewGame.addClass('active');
        
    }

    function anotherPlayersTurn() {
        console.log('another players turn');
        $currentPlayerName.text(currentPlayer.name);
        $waitingForMessage.addClass('show');
    }

    function setNextPlayer(currentindex) {
        let nextIndex;

        if(currentindex == allPlayers.length - 1) {
            nextIndex = 0;
        } else {
            nextIndex = currentindex + 1;
        }

        if(allPlayers[nextIndex].id == playerData.id) {
            $nextPlayerName.text('You!');    
        } else {
            $nextPlayerName.text(allPlayers[nextIndex].name);
        } 
    }




// ALL HELL BREAKS LOOSE HERE..... for now

    
    $btnPause = $('.container-subgame');
    $subGameDescription = $btnPause.find('.description');
    $subGamePara = $subGameDescription.find('p');
    $subGameName = $btnPause.find('.name');


    let gameLength;

    function thisPlayersTurn() {
        console.log('this players turn');
        $currentPlayerName.text('You!');
        $yourTurnMessage.addClass('show');

        gameLength = subgames.length;
        console.log(gameLength);

        animateEverything();


    }

    let currentGame = {};
    currentGame.going = true;
    let newNumber, newSubgame, newCategory;

    function animateEverything() {
        if(currentGame.going) {
            newNumber = getRandomInt(0, gameLength - 1);
            newSubgame = subgames[newNumber];
            newCategory = newSubgame.details.category;

            var newMain = newSubgame.name;
            var newSub = newSubgame.details.description;

            $subGameName.html(newMain);
            $subGamePara.html(newSub);

            animateLoopTimeout = setTimeout(animateEverything, 200);    
        }   
    }
    
    $btnPause.on('click', handlePause);

    function handlePause(event) {
        
        if(currentGame.going){
  

                $subGameDescription.addClass('show-me');
                $subGameName.addClass('animate-me');
                // $gamePage.addClass('subgame-selected');
                // perfectScroll = new PerfectScrollbar('.page-game .description p');

                // Data
                currentGame.going = false;

          

        } else {
            if(!$(event.target).is('.btn')) {
                $subGameDescription.removeClass('show-me');
                // $gamePage.removeClass('subgame-selected');
                $subGameName.removeClass('animate-me');

                currentGame.going = true;
                animateEverything();               

            }                
        }  
    }

    function getRandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }


    return {
        init: init
    } 
}();